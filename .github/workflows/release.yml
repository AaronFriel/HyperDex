name: build-bump-and-release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      commitish:
        description: 'Commit SHA (leave blank for HEAD of main)'
        required: false
  pull_request:

permissions: { contents: write }

concurrency:
  group: release
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.inputs.commitish || github.sha }}

    - name: Compute next semantic-patch tag
      id: bump
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          let prev = 'v0.0.0';
          try {
            const rel = await github.rest.repos.getLatestRelease(context.repo);
            prev = rel.data.tag_name;
          } catch (e) {
            if (e.status !== 404) throw e;
          }
          const [maj = 0, min = 0, patch = 0] = prev.replace(/^v/, '').split('.').map(Number);
          const next = `v${maj}.${min}.${patch + 1}`;
          core.setOutput('next', next);

    - name: Bootstrap build environment
      run: |
        chmod +x .agent/setup.sh
        sudo bash .agent/setup.sh

    - name: Build HyperDex
      run: make -C .agent hyperdex

    - name: Create release tarball
      id: pack
      run: |
        TAG=${{ steps.bump.outputs.next }}
        tar -czf "hyperdex-${TAG}-linux-amd64.tar.gz" -C target/install .
        echo "tarball=hyperdex-${TAG}-linux-amd64.tar.gz" >> "$GITHUB_OUTPUT"

    - name: Tag & create release
      id: release
      env:
        TAG: ${{ steps.bump.outputs.next }}
        TARBALL: ${{ steps.pack.outputs.tarball }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        EVENT_NAME: ${{ github.event_name }}
      run: |
        git config user.name  "GitHub Actions"
        git config user.email "actions@github.com"
        if [ "$EVENT_NAME" != "pull_request" ]; then
          git tag "$TAG"
          git push origin "$TAG"
          DRAFT_FLAG="--draft=false"
        else
          DRAFT_FLAG="--draft"
        fi
        gh release create "$TAG" \
          --title "HyperDex $TAG" \
          --notes "Automated build of HyperDex $TAG" \
          --verify-tag \
          $DRAFT_FLAG \
          "$TARBALL"
