/* Copyright (c) 2015, Cornell University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of HyperDex nor the names of its contributors may be
 *       used to endorse or promote products derived from this software without
 *       specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* This file is generated by bindings/java.py */

package org.hyperdex.client;

import java.util.List;
import java.util.Map;
import java.util.HashMap;

public class Microtransaction
{
    protected Microtransaction(Client client, String space)
    {
        this._create(client, space);
    }
    
    private native void _create(Client client, String space);
    



    public native Iterator uxact_put(Microtransaction microtransaction, Map<String, Object> attributes);









    public native Iterator uxact_atomic_add(Microtransaction microtransaction, Map<String, Object> attributes);




    public native Iterator uxact_atomic_sub(Microtransaction microtransaction, Map<String, Object> attributes);




    public native Iterator uxact_atomic_mul(Microtransaction microtransaction, Map<String, Object> attributes);




    public native Iterator uxact_atomic_div(Microtransaction microtransaction, Map<String, Object> attributes);







    public native Iterator uxact_atomic_and(Microtransaction microtransaction, Map<String, Object> attributes);




    public native Iterator uxact_atomic_or(Microtransaction microtransaction, Map<String, Object> attributes);













    public native Iterator uxact_string_prepend(Microtransaction microtransaction, Map<String, Object> attributes);




    public native Iterator uxact_string_append(Microtransaction microtransaction, Map<String, Object> attributes);




    public native Iterator uxact_list_lpush(Microtransaction microtransaction, Map<String, Object> attributes);




    public native Iterator uxact_list_rpush(Microtransaction microtransaction, Map<String, Object> attributes);
















    public native Iterator uxact_document_rename(Microtransaction microtransaction, Map<String, Object> attributes);




    public native Iterator uxact_document_unset(Microtransaction microtransaction, Map<String, Object> attributes);
















































}
